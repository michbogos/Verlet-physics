# version 100

precision mediump float;

uniform vec3 viewPos;


// Input vertex attributes (from vertex shader)
varying vec3 fragPosition;
varying vec4 fragColor;
varying vec3 fragNormal;
varying vec2 fragTexCoord;

varying vec4 finalColor;

void main()
{
    vec4 res = vec4(fragTexCoord, 1.0, 1.0) * dot(fragNormal, normalize(viewPos));
    gl_FragColor = res;
}
# version 100

precision mediump float;


// varyingput vertex attributes
attribute vec3 vertexPosition;
attribute vec3 vertexNormal;
attribute vec4 vertexColor;
attribute vec2 vertexTexCoord;

// varyingput uniform values
uniform mat4 mvp;
uniform mat4 matModel;
uniform mat4 matNormal;

// Output vertex attributes (to fragment shader)
varying vec3 fragPosition;
varying vec2 fragTexCoord;
varying vec4 fragColor;
varying vec3 fragNormal;

// NOTE: Add here your custom variables

void main()
{
    // Send vertex attributes to fragment shader
    fragPosition = vec3(matModel*vec4(vertexPosition, 1.0));
    fragColor = vertexColor;
    fragNormal = normalize(vec3(matNormal*vec4(vertexNormal, 1.0)));
    fragTexCoord = vertexTexCoord;
    // Calculate final vertex position
    gl_Position = mvp*vec4(vertexPosition, 1.0);
}
